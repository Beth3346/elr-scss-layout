@import "elr-scss-functions/src/main";

// Layout Classes
@mixin elr-reset-element() {
  margin: 0;
  padding: 0;
  line-height: 1;
}

// Modern clearfix
// Use instead of overflow:hidden to clear floats

@mixin elr-clearfix() {
  &:after,
  &:before {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}

@mixin elr-screen-reader() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// Centers an element horizontally on the page

@mixin elr-center-block() {
  margin-left: auto !important;
  margin-right: auto !important;
  float: none !important;
  display: block;
}

@mixin elr-center-flex() {
  margin-left: auto !important;
  margin-right: auto !important;
  float: none !important;
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin elr-position($config: ()) {
  $config: extend(
    (
      x: "center",
      y: "center",
    ),
    $config
  );
  $x: map-get($config, x);
  $y: map-get($config, y);

  position: absolute;
  margin: 0;

  @if ($x == "center" and $y == "center") {
    top: 50% !important;
    left: 50% !important;
    transform: translate(-50%, -50%) !important;
  } @else if ($x == "center" and $y == "top") {
    left: 50% !important;
    top: 0;
    transform: translateX(-50%) !important;
  } @else if ($x == "center" and $y == "bottom") {
    left: 50% !important;
    bottom: 0;
    top: auto;
    transform: translateX(-50%) !important;
  } @else if ($x == "left" and $y == "center") {
    top: 50% !important;
    left: 0;
    transform: translateY(-50%) !important;
  } @else if ($x == "right" and $y == "center") {
    top: 50% !important;
    right: 0;
    left: auto;
    transform: translateY(-50%) !important;
  }
}

@mixin elr-disable-scrollbars {
  &::-webkit-scrollbar {
    width: 0px;
    background: transparent; /* Chrome/Safari/Webkit */
  }

  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE 10+ */
}

@mixin elr-containers($config: ()) {
  $config: extend(
    (
      max-width: $content-width,
    ),
    $config
  );

  $max-width: map-get($config, max-width);

  .container-full {
    background-color: $lightest-blue;

    .content {
      padding: 0;
      margin: auto;
    }
  }
  .container-fixed {
    background-color: $lightest-blue;

    .content {
      max-width: $max-width;
      margin: auto;
      padding: ($base-fontsize * 2);

      @media (max-width: $mobile-width) {
        padding: 0;
      }
    }
  }

  .container-padded {
    background-color: $lightest-blue;

    .content {
      padding: $base-fontsize ($base-fontsize * 2);

      @media (max-width: $mobile-width) {
        padding: $base-fontsize;
      }
    }
  }
}
